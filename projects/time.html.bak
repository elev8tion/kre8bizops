<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"/>
    <title>Time Tracking - ELEV8TION</title>

    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet"/>
    <link href="../css/theme-and-custom.css" rel="stylesheet"/>
    <link href="../css/cosmic-design-system.css" rel="stylesheet"/>
    <link href="../css/cosmic-tokens.css" rel="stylesheet"/>
    <link href="../css/cosmic-utilities.css" rel="stylesheet"/>
    <link href="../css/cosmic-animations.css" rel="stylesheet"/>
    <link href="../css/cosmic-buttons.css" rel="stylesheet"/>
    <link href="../css/cosmic-forms.css" rel="stylesheet"/>
    <link href="../css/cosmic-cards.css" rel="stylesheet"/>
    <link href="../css/cosmic-fix.css" rel="stylesheet"/>
</head>
<body>
    <div class="min-h-screen w-full bg-black relative">
        <div class="absolute inset-0 z-0" style="background: radial-gradient(circle at 20% 20%, rgba(255,255,255,0.08) 0%, transparent 40%), radial-gradient(circle at 80% 30%, rgba(255,255,255,0.05) 0%, transparent 40%), linear-gradient(120deg, #0f0e17 0%, #1a1b26 100%)"></div>

        <main id="main-content" class="position-relative" style="min-height: 100vh; padding: 2rem;">
            <div class="container-fluid">

                <div class="glass-medium glow-purple-soft mb-4" style="padding: 2rem; border-radius: 24px;">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h1 class="h2 mb-2" style="color: #fff; font-weight: 700;">
                                <i class="fas fa-clock mr-2" style="color: #667eea;"></i>
                                Time Tracking
                            </h1>
                            <p class="mb-0" style="color: rgba(255,255,255,0.6);">
                                Track time spent on tasks and projects
                            </p>
                        </div>
                        <div class="col-md-4 text-right">
                            <button class="btn btn-primary" onclick="TimePage.logTime()">
                                <i class="fas fa-plus mr-2"></i>Log Time
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Time Stats -->
                <div class="row mb-4">
                    <div class="col-md-3 mb-3">
                        <div class="glass-medium" style="padding: 1.5rem; border-radius: 12px; border-left: 4px solid #667eea;">
                            <div style="color: rgba(255,255,255,0.6); font-size: 12px; margin-bottom: 5px;">TODAY</div>
                            <div style="color: white; font-size: 24px; font-weight: 700;" id="stat-today">0h</div>
                        </div>
                    </div>
                    <div class="col-md-3 mb-3">
                        <div class="glass-medium" style="padding: 1.5rem; border-radius: 12px; border-left: 4px solid #50b5ff;">
                            <div style="color: rgba(255,255,255,0.6); font-size: 12px; margin-bottom: 5px;">THIS WEEK</div>
                            <div style="color: white; font-size: 24px; font-weight: 700;" id="stat-week">0h</div>
                        </div>
                    </div>
                    <div class="col-md-3 mb-3">
                        <div class="glass-medium" style="padding: 1.5rem; border-radius: 12px; border-left: 4px solid #3dd598;">
                            <div style="color: rgba(255,255,255,0.6); font-size: 12px; margin-bottom: 5px;">BILLABLE</div>
                            <div style="color: white; font-size: 24px; font-weight: 700;" id="stat-billable">0h</div>
                        </div>
                    </div>
                    <div class="col-md-3 mb-3">
                        <div class="glass-medium" style="padding: 1.5rem; border-radius: 12px; border-left: 4px solid #ffc107;">
                            <div style="color: rgba(255,255,255,0.6); font-size: 12px; margin-bottom: 5px;">TOTAL HOURS</div>
                            <div style="color: white; font-size: 24px; font-weight: 700;" id="stat-total">0h</div>
                        </div>
                    </div>
                </div>

                <div id="time-table-container"></div>

            </div>
        </main>
    </div>

    <script src="../js/jquery-3.4.1.min.js"></script>
    <script src="../js/popper.min.js"></script>
    <script src="../js/bootstrap.min.js"></script>
    <script src="../js/custom.js"></script>
    <script src="../js/db.js"></script>
    <script src="../js/utils.js"></script>
    <script src="../js/navigation.js"></script>
    <script src="../js/components/modals.js"></script>
    <script src="../js/components/tables.js"></script>
    <script src="../js/components/forms.js"></script>

    <script>
        const TimePage = {
            table: null,

            init: function() {
                if (!localStorage.getItem('isLoggedIn')) {
                    window.location.href = '../index-local.html';
                    return;
                }

                this.loadStats();
                this.loadTable();
            },

            loadStats: function() {
                const entries = DB.getAll(DB.COLLECTIONS.TIME_ENTRIES);
                const today = new Date().toISOString().split('T')[0];

                // Get week start (Monday)
                const now = new Date();
                const dayOfWeek = now.getDay();
                const diff = now.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1);
                const weekStart = new Date(now.setDate(diff)).toISOString().split('T')[0];

                const todayHours = entries
                    .filter(e => e.date === today)
                    .reduce((sum, e) => sum + (e.hours || 0), 0);

                const weekHours = entries
                    .filter(e => e.date >= weekStart)
                    .reduce((sum, e) => sum + (e.hours || 0), 0);

                const billableHours = entries
                    .filter(e => e.billable)
                    .reduce((sum, e) => sum + (e.hours || 0), 0);

                const totalHours = entries.reduce((sum, e) => sum + (e.hours || 0), 0);

                $('#stat-today').text(todayHours.toFixed(1) + 'h');
                $('#stat-week').text(weekHours.toFixed(1) + 'h');
                $('#stat-billable').text(billableHours.toFixed(1) + 'h');
                $('#stat-total').text(totalHours.toFixed(1) + 'h');
            },

            loadTable: function() {
                const entries = DB.getAll(DB.COLLECTIONS.TIME_ENTRIES);

                this.table = DataTable.create('time-table-container', {
                    title: 'Time Entries',
                    icon: 'fas fa-stopwatch',
                    data: entries,
                    columns: [
                        {
                            field: 'date',
                            label: 'Date',
                            sortable: true,
                            render: (value) => {
                                const isToday = Utils.isToday(new Date(value));
                                return `
                                    <div>
                                        <div style="color: white;">${Utils.formatDate(value)}</div>
                                        ${isToday ? '<span class="cell-badge" style="background: rgba(61, 213, 152, 0.2); color: #3dd598; font-size: 10px;">TODAY</span>' : ''}
                                    </div>
                                `;
                            }
                        },
                        {
                            field: 'hours',
                            label: 'Hours',
                            sortable: true,
                            render: (value) => `<span style="color: #667eea; font-weight: 600; font-size: 16px;">${value}h</span>`
                        },
                        {
                            field: 'task_id',
                            label: 'Task / Project',
                            render: (value, row) => {
                                const task = value ? DB.get(DB.COLLECTIONS.TASKS, value) : null;
                                const project = row.project_id ? DB.get(DB.COLLECTIONS.PROJECTS, row.project_id) : null;

                                return `
                                    <div>
                                        ${task ? `<div style="color: white; font-weight: 500;">${task.title}</div>` : ''}
                                        ${project ? `<div style="color: rgba(255,255,255,0.5); font-size: 12px;"><i class="fas fa-folder mr-1"></i>${project.name}</div>` : ''}
                                        ${!task && !project ? '<span style="color: rgba(255,255,255,0.5);">No task or project</span>' : ''}
                                    </div>
                                `;
                            }
                        },
                        {
                            field: 'notes',
                            label: 'Notes',
                            render: (value) => value ? Utils.truncate(value, 50) : '-'
                        },
                        {
                            field: 'billable',
                            label: 'Billable',
                            render: (value) => {
                                if (value) {
                                    return '<span class="cell-badge" style="background: rgba(61, 213, 152, 0.2); color: #3dd598;"><i class="fas fa-check mr-1"></i>Billable</span>';
                                } else {
                                    return '<span class="cell-badge" style="background: rgba(255,255,255,0.1); color: rgba(255,255,255,0.5);">Non-billable</span>';
                                }
                            }
                        },
                        {
                            field: 'created_at',
                            label: 'Logged',
                            sortable: true,
                            render: (value) => Utils.formatRelativeTime(value)
                        },
                        {
                            field: 'id',
                            label: 'Actions',
                            width: '180px',
                            render: (value) => `
                                <div class="cell-actions">
                                    <button class="btn btn-sm btn-secondary" onclick="TimePage.editEntry('${value}')">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-danger" onclick="TimePage.deleteEntry('${value}')">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            `
                        }
                    ],
                    searchable: true,
                    pagination: true,
                    perPage: 15,
                    actions: [
                        {
                            id: 'export',
                            label: 'Export',
                            icon: 'fas fa-download',
                            class: 'btn-secondary',
                            onClick: () => this.exportTimesheet()
                        }
                    ],
                    emptyMessage: 'No time entries found. Click "Log Time" to create your first entry.',
                    onRowClick: (row) => this.editEntry(row.id)
                });
            },

            logTime: function() {
                const tasks = DB.getAll(DB.COLLECTIONS.TASKS);
                const projects = DB.getAll(DB.COLLECTIONS.PROJECTS);

                Modals.form({
                    title: 'Log Time',
                    icon: 'fas fa-clock',
                    size: 'lg',
                    fields: [
                        { name: 'date', label: 'Date', type: 'date', required: true, value: new Date().toISOString().split('T')[0] },
                        { name: 'hours', label: 'Hours', type: 'number', required: true, min: 0.25, max: 24, step: 0.25, placeholder: '2.5' },
                        { name: 'task_id', label: 'Task', type: 'select', options: tasks.map(t => ({ value: t.id, label: t.title })) },
                        { name: 'project_id', label: 'Project', type: 'select', options: projects.map(p => ({ value: p.id, label: p.name })) },
                        { name: 'notes', label: 'Notes', type: 'textarea', rows: 3, placeholder: 'What did you work on?' },
                        { name: 'billable', label: 'Billable', type: 'checkbox', checkboxLabel: 'This time is billable to client', value: true }
                    ],
                    submitText: 'Log Time'
                }).then(data => {
                    DB.create(DB.COLLECTIONS.TIME_ENTRIES, data);
                    Utils.showToast('Time logged successfully!', 'success');
                    this.loadStats();
                    this.loadTable();
                }).catch(() => {});
            },

            editEntry: function(id) {
                const entry = DB.get(DB.COLLECTIONS.TIME_ENTRIES, id);
                if (!entry) return;

                const tasks = DB.getAll(DB.COLLECTIONS.TASKS);
                const projects = DB.getAll(DB.COLLECTIONS.PROJECTS);

                Modals.form({
                    title: 'Edit Time Entry',
                    icon: 'fas fa-clock',
                    size: 'lg',
                    fields: [
                        { name: 'date', label: 'Date', type: 'date', required: true, value: entry.date },
                        { name: 'hours', label: 'Hours', type: 'number', required: true, min: 0.25, max: 24, step: 0.25, value: entry.hours },
                        { name: 'task_id', label: 'Task', type: 'select', value: entry.task_id, options: tasks.map(t => ({ value: t.id, label: t.title })) },
                        { name: 'project_id', label: 'Project', type: 'select', value: entry.project_id, options: projects.map(p => ({ value: p.id, label: p.name })) },
                        { name: 'notes', label: 'Notes', type: 'textarea', rows: 3, value: entry.notes },
                        { name: 'billable', label: 'Billable', type: 'checkbox', checkboxLabel: 'This time is billable to client', value: entry.billable }
                    ],
                    submitText: 'Update Entry'
                }).then(data => {
                    DB.update(DB.COLLECTIONS.TIME_ENTRIES, id, data);
                    Utils.showToast('Time entry updated successfully!', 'success');
                    this.loadStats();
                    this.loadTable();
                }).catch(() => {});
            },

            deleteEntry: async function(id) {
                const entry = DB.get(DB.COLLECTIONS.TIME_ENTRIES, id);
                if (!entry) return;

                const confirmed = await Utils.confirmDelete(`Are you sure you want to delete this ${entry.hours}h time entry?`);

                if (confirmed) {
                    DB.delete(DB.COLLECTIONS.TIME_ENTRIES, id);
                    Utils.showToast('Time entry deleted successfully!', 'success');
                    this.loadStats();
                    this.loadTable();
                }
            },

            exportTimesheet: function() {
                const entries = DB.getAll(DB.COLLECTIONS.TIME_ENTRIES);

                // Enhance with project/task names
                const enhanced = entries.map(entry => {
                    const task = entry.task_id ? DB.get(DB.COLLECTIONS.TASKS, entry.task_id) : null;
                    const project = entry.project_id ? DB.get(DB.COLLECTIONS.PROJECTS, entry.project_id) : null;

                    return {
                        date: entry.date,
                        hours: entry.hours,
                        task: task ? task.title : '',
                        project: project ? project.name : '',
                        notes: entry.notes || '',
                        billable: entry.billable ? 'Yes' : 'No'
                    };
                });

                Utils.downloadJson(enhanced, `timesheet-export-${new Date().toISOString().split('T')[0]}.json`);
                Utils.showToast('Timesheet exported successfully!', 'success');
            }
        };

        $(document).ready(() => TimePage.init());
    </script>
</body>
</html>
